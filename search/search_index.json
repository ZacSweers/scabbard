{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"configuration/","text":"Configuration Gradle plugin The scabbard plugin can be configured in following ways. Enable scabbard processor scabbard { enabled = true // default true } Fail build on any error in Scabbard processor scabbard { failOnError = true // default false } By default, Scabbard processor does not fail the build should any error occur. This flag could be used to change that behavior. Enable full binding graph validation scabbard { fullBindingGraphValidation = true // default false } Enables Dagger's full binding graph validation which validates the entire graph including all bindings in every @Component , @Subcomponent and @Module . This enables highlighting missing bindings which can be used to understand errors. Additionally since @Module itself is seen a graph, graphs will be generated for bindings in a @Module . Mult-module projects While in most cases, applying on app module is sufficient, depending on your project structure, you might need to apply Scabbard gradle plugin wherever Dagger compiler is applied.","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#gradle-plugin","text":"The scabbard plugin can be configured in following ways.","title":"Gradle plugin"},{"location":"configuration/#enable-scabbard-processor","text":"scabbard { enabled = true // default true }","title":"Enable scabbard processor"},{"location":"configuration/#fail-build-on-any-error-in-scabbard-processor","text":"scabbard { failOnError = true // default false } By default, Scabbard processor does not fail the build should any error occur. This flag could be used to change that behavior.","title":"Fail build on any error in Scabbard processor"},{"location":"configuration/#enable-full-binding-graph-validation","text":"scabbard { fullBindingGraphValidation = true // default false } Enables Dagger's full binding graph validation which validates the entire graph including all bindings in every @Component , @Subcomponent and @Module . This enables highlighting missing bindings which can be used to understand errors. Additionally since @Module itself is seen a graph, graphs will be generated for bindings in a @Module .","title":"Enable full binding graph validation"},{"location":"configuration/#mult-module-projects","text":"While in most cases, applying on app module is sufficient, depending on your project structure, you might need to apply Scabbard gradle plugin wherever Dagger compiler is applied.","title":"Mult-module projects"},{"location":"faq/","text":"Frequently Asked Questions Have a question that isn't part of the FAQ? Please search Github Issues . Does it support mixed Kotlin/Java projects? Yes. What is the impact on binary size? There should be no impact since Scabbard only runs during compilation and generated images are not meant to be packaged into binary. You could control if Scabbard is enabled for release builds via scabbard { enabled = false } block. What is the impact on build time? Scabbard processor uses standard annotation processing APIs to generate images. This lets the processor be cacheable and does not run when inputs have not changed. Currently there are no benchmark available and more work is expected to be done in performance area. Scabbard processor is a plugin to Dagger via Dagger SPI and it is non incremental. There are some ideas to workaround this, please see #. How can I understand the generated graph? Please refer to Scabbard cheat sheet. Will more formats (svg) be supported? Yes, there are plans to support more formats. Please \ud83d\udc4d this issue. I don't not see gutter icons to view graph. Please wait for Android Studio/IntelliJ indexing to be done for gutter icons to be visible. Even after indexing if the icons are not visible, please file an issue. You could also look for generated png file in the build folder. Some dependencies are missing. In order to keep graphs small and readable, Scabbard groups the dependencies by @Component or @Subcomponent and renders them in individual graphs. This has the benefit of keeping the graphs readable for large projects but this structure might not properly render cross component dependencies (inherited bindings in a subcomponent). Some work is being doing in this area, please refer #. Any other format for visualizing the dependency graph? Some other graph formats being considered are: Component Tree : Render component and subcomponents in a tree structure similar to Uber Ribs. Single graph : Instead of splitting the graph into multiple files, render all nodes in single file.","title":"Faq"},{"location":"faq/#frequently-asked-questions","text":"Have a question that isn't part of the FAQ? Please search Github Issues .","title":"Frequently Asked Questions"},{"location":"faq/#does-it-support-mixed-kotlinjava-projects","text":"Yes.","title":"Does it support mixed Kotlin/Java projects?"},{"location":"faq/#what-is-the-impact-on-binary-size","text":"There should be no impact since Scabbard only runs during compilation and generated images are not meant to be packaged into binary. You could control if Scabbard is enabled for release builds via scabbard { enabled = false } block.","title":"What is the impact on binary size?"},{"location":"faq/#what-is-the-impact-on-build-time","text":"Scabbard processor uses standard annotation processing APIs to generate images. This lets the processor be cacheable and does not run when inputs have not changed. Currently there are no benchmark available and more work is expected to be done in performance area. Scabbard processor is a plugin to Dagger via Dagger SPI and it is non incremental. There are some ideas to workaround this, please see #.","title":"What is the impact on build time?"},{"location":"faq/#how-can-i-understand-the-generated-graph","text":"Please refer to Scabbard cheat sheet.","title":"How can I understand the generated graph?"},{"location":"faq/#will-more-formats-svg-be-supported","text":"Yes, there are plans to support more formats. Please \ud83d\udc4d this issue.","title":"Will more formats (svg) be supported?"},{"location":"faq/#i-dont-not-see-gutter-icons-to-view-graph","text":"Please wait for Android Studio/IntelliJ indexing to be done for gutter icons to be visible. Even after indexing if the icons are not visible, please file an issue. You could also look for generated png file in the build folder.","title":"I don't not see gutter icons to view graph."},{"location":"faq/#some-dependencies-are-missing","text":"In order to keep graphs small and readable, Scabbard groups the dependencies by @Component or @Subcomponent and renders them in individual graphs. This has the benefit of keeping the graphs readable for large projects but this structure might not properly render cross component dependencies (inherited bindings in a subcomponent). Some work is being doing in this area, please refer #.","title":"Some dependencies are missing."},{"location":"faq/#any-other-format-for-visualizing-the-dependency-graph","text":"Some other graph formats being considered are: Component Tree : Render component and subcomponents in a tree structure similar to Uber Ribs. Single graph : Instead of splitting the graph into multiple files, render all nodes in single file.","title":"Any other format for visualizing the dependency graph?"},{"location":"overview/","text":"Scabbard Image Visualize and understand your Dagger 2 dependency graph. Features Visualize entry points, dependency graph, component relationships and scopes in your Dagger 2 setup. Minimal setup - Scabbard's Gradle plugin prepares your project for graph generation and provides ability to customize graph generation behavior. IDE integration - Easily view a @Component or a @Subcomponnet graph directly from source code via gutter icons (IntelliJ/Android Studio). Supports both Kotlin and Java. Getting Started Requirements GraphViz Scabbard uses GraphViz to generate graphs and hence requires dot command to be available it to work. Installation instructions Mac - Install via homebrew. brew install graphviz . Linux - Install via apt. sudo apt-get install graphviz . Windows - Install via GraphViz installer After installation, verify installation by executing dot -V , example: dot - graphviz version 2.38.0 (20140413.2041) Installation Repositories Scabbard artifacts are served via jcenter() . Please ensure jcenter() is added to your root build.gradle . Gradle Plugin Using the plugins DSL: plugins { // After Java, Kotlin or Android plugins id scabbard.gradle version 0.0.1 } or if you are using older versions of Gradle: buildscript { repositories { maven { url https://plugins.gradle.org/m2/ } } dependencies { classpath gradle.plugin.dev.arunkumar:scabbard-gradle-plugin:0.0.1 } } // After Java, Kotlin or Android plugins apply plugin: scabbard.gradle After applying the plugin, configure the plugin by adding a scabbard block: scabbard { enabled = true } Success That's it. Now after building the project, Scabbard would have generated dot and png files for your Dagger components in your build folder. Android Studio/Idea Plugin Scabbard also ships an IDE plugin to open generated png's directly from your source code via gutter icons. Please install plugins from File Preferences/Settings Plugins Market Place Search for \"Scabbard\" Install and Restart. Alternatively you could download the plugin jar file directly from releases and install via File Preferences/Settings Plugins Gear Icon Install from Disk and point to jar file . Success That's it. The plugin will automatically add an icon \ud83d\udde1 next to @Component , @Subcomponent or @Module as soon as project is indexed. Other build systems Scabbard at its core is just an annotation processor. You could add dev.arunkumar:scabbard-processor:0.0.1 to your build system's annotation processor config to get it working. Resources Configuration FAQ License Copyright 2020 Arunkumar Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"overview/#scabbard","text":"Image Visualize and understand your Dagger 2 dependency graph.","title":"Scabbard"},{"location":"overview/#features","text":"Visualize entry points, dependency graph, component relationships and scopes in your Dagger 2 setup. Minimal setup - Scabbard's Gradle plugin prepares your project for graph generation and provides ability to customize graph generation behavior. IDE integration - Easily view a @Component or a @Subcomponnet graph directly from source code via gutter icons (IntelliJ/Android Studio). Supports both Kotlin and Java.","title":"Features"},{"location":"overview/#getting-started","text":"","title":"Getting Started"},{"location":"overview/#requirements","text":"","title":"Requirements"},{"location":"overview/#graphviz","text":"Scabbard uses GraphViz to generate graphs and hence requires dot command to be available it to work.","title":"GraphViz"},{"location":"overview/#installation-instructions","text":"Mac - Install via homebrew. brew install graphviz . Linux - Install via apt. sudo apt-get install graphviz . Windows - Install via GraphViz installer After installation, verify installation by executing dot -V , example: dot - graphviz version 2.38.0 (20140413.2041)","title":"Installation instructions"},{"location":"overview/#installation","text":"","title":"Installation"},{"location":"overview/#repositories","text":"Scabbard artifacts are served via jcenter() . Please ensure jcenter() is added to your root build.gradle .","title":"Repositories"},{"location":"overview/#gradle-plugin","text":"Using the plugins DSL: plugins { // After Java, Kotlin or Android plugins id scabbard.gradle version 0.0.1 } or if you are using older versions of Gradle: buildscript { repositories { maven { url https://plugins.gradle.org/m2/ } } dependencies { classpath gradle.plugin.dev.arunkumar:scabbard-gradle-plugin:0.0.1 } } // After Java, Kotlin or Android plugins apply plugin: scabbard.gradle After applying the plugin, configure the plugin by adding a scabbard block: scabbard { enabled = true } Success That's it. Now after building the project, Scabbard would have generated dot and png files for your Dagger components in your build folder.","title":"Gradle Plugin"},{"location":"overview/#android-studioidea-plugin","text":"Scabbard also ships an IDE plugin to open generated png's directly from your source code via gutter icons. Please install plugins from File Preferences/Settings Plugins Market Place Search for \"Scabbard\" Install and Restart. Alternatively you could download the plugin jar file directly from releases and install via File Preferences/Settings Plugins Gear Icon Install from Disk and point to jar file . Success That's it. The plugin will automatically add an icon \ud83d\udde1 next to @Component , @Subcomponent or @Module as soon as project is indexed.","title":"Android Studio/Idea Plugin"},{"location":"overview/#other-build-systems","text":"Scabbard at its core is just an annotation processor. You could add dev.arunkumar:scabbard-processor:0.0.1 to your build system's annotation processor config to get it working.","title":"Other build systems"},{"location":"overview/#resources","text":"Configuration FAQ","title":"Resources"},{"location":"overview/#license","text":"Copyright 2020 Arunkumar Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"}]}